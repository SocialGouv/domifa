#

include:
  - project: SocialGouv/gitlab-ci-yml
    file: /base_yarn_stage.yml
    ref: v17.15.0
  - project: SocialGouv/gitlab-ci-yml
    file: /base_register_stage.yml
    ref: v17.15.0

#

variables:
  # Globals
  PYTHON_VERSION: "3.6-alpine"

stages:
  - "Install"
  - "Tests"
  - "Registration"

#

# Build:
#   extends: .base_yarn_script
#   stage: Install
#   image: node:13
#   interruptible: true
#   cache:
#     key:
#       files:
#         - yarn.lock
#       prefix: ${CI_JOB_NAME}
#     paths:
#       - packages/frontend/node_modules/.cache
#   services:
#     - name: mongo:4.0.3
#   before_script:
#     # NOTE(douglasduteil): yarn caching
#     - yarn config set cache-folder $CI_PROJECT_DIR/.cache/yarn
#   script:
#     - yarn --frozen-lockfile --prefer-offline
#     - yarn --cwd packages/backend build
#     - yarn --cwd packages/frontend build --prod
#   artifacts:
#     expire_in: 1 day
#     paths:
#       - packages/backend/dist
#       - packages/frontend/dist
#

Tests:
  stage: Tests
  image: node:14.15.0-alpine3.12
  cache:
    key:
      files:
        - yarn.lock
      prefix: ${CI_JOB_NAME}
    paths:
      - packages/frontend/node_modules/.cache
  services:
    - name: mongo:4.0.3
    - name: postgres:11.7
  variables:
    MONGO_INITDB_ROOT_USERNAME: "root"
    MONGO_INITDB_ROOT_PASSWORD: "root"
    DB_USER: "root"
    DB_PASS: "root"
    DB_NAME: "domifa_test"
    POSTGRES_DB: nice_marmot
    POSTGRES_USER: runner
    POSTGRES_PASSWORD: "1234"
    POSTGRES_HOST_AUTH_METHOD: trust
    DOMIFA_ENV_ID: test
    NODE_ENV: tests-travis
    SECRET: "1234"
    DOMIFA_ENV_ID: "test"
    POSTGRES_USERNAME: "runner"
    POSTGRES_DATABASE: "postgres"
    DOMIFA_PRINT_CONFIG: "true"
  # shell: bash
  before_script:
    - yarn --frozen-lockfile
    - printenv | grep
      -e "^MONGO_"
      -e "^DB_"
      -e "^CI_PROJECT_"
      -e "^POSTGRES_" | sort
    - |
      > ./.env.test.travis.env
      > ./packages/backend/.env.backend.test.travis.env
    - nc -zvv mongo 27017
    - apk add mongodb-tools
    - ./_scripts/db/restore-mongo.sh --db=test
    - ./_scripts/db/restore-postgres.sh --db=test
    # - ls -lah
    # - ls -lah ./_scripts/
    # - ls -lah ./_scripts/db/
    # - stat ./_scripts/db/restore-mongo.sh
  script:
    - nc -zvv mongo 27017
    # HACK(douglasduteil): ensure run production build with localhost api
    # The build production will be used to run local e2e tests.
    # - mv
    #   packages/frontend/src/environments/environment.travis.ts
    #   packages/frontend/src/environments/environment.prod.ts
    #
    - yarn build
    #
    - cp -r -i ./packages/backend/src/ressources ./packages/backend/dist/ressources

    # # start mongo+postgres (with initial dumps)
    # - ./docker-compose.travis.run.sh

    # run backend unit tests
    - yarn workspace @domifa/backend test:travis --coverage --detectOpenHandles --forceExit

    # # re-create fresh mongo+postgres (with test dumps)
    # - ./docker-compose.travis.run.sh

    # # launch backend
    # - yarn workspace @domifa/backend start:tests-travis &

    # # run frontend unit tests
    # - yarn workspace @domifa/frontend test --coverage --detectOpenHandles --forceExit

    # # launch frontend
    # - npx serve packages/frontend/dist/domifa -l 4200 &

    # # run e2e tests
    # - cd optional/e2e/runners/puppeteer/
    # - yarn --frozen-lockfile
    # - yarn test --debug
# Register frontend image:
#   extends: .base_register_stage
#   interruptible: true
#   variables:
#     CONTEXT: .
#     IMAGE_NAME: $CI_REGISTRY_IMAGE/frontend
#     DOCKER_BUILD_ARGS: >-
#       -f packages/frontend/Dockerfile

# Register backend image:
#   extends: .base_register_stage
#   interruptible: true
#   variables:
#     CONTEXT: .
#     IMAGE_NAME: $CI_REGISTRY_IMAGE/backend
#     DOCKER_BUILD_ARGS: >-
#       --shm-size 768M
#       -f packages/backend/Dockerfile
