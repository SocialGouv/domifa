include:
  # docker build + push: https://github.com/SocialGouv/gitlab-ci-yml/blob/v22.0.0/base_register_docker_stage.yml
  - project: SocialGouv/gitlab-ci-yml
    file: /base_autodevops.yml
    ref: v21.0.1

variables:
  # Globals
  AUTO_DEVOPS_ENABLE_KAPP: "🕹️"
  PYTHON_VERSION: "3.6-alpine"

stages:
  - "Install"
  - "Build"
  - "Tests"
  - "Registration"
  - "Release"
  - "Deploy"
  - "Seed"

.print_env: &print_env |
  printenv | grep \
    -e "^CI_COMMIT_" \
    -e "^CI_ENVIRONMENT_" \
    -e "^CI_PROJECT_" \
    -e "^CI_REGISTRY_" \
    -e "^KUBE_INGRESS_BASE_DOMAIN" \
    -e "^KUBE_NAMESPACE" \
    -e "^PRODUCTION" \
    -e "^DOMIFA" \
    -e "^PUPPETEER_" \
    -e "^POSTGRES_" \
    -e "^RANCHER_PROJECT_ID" | sort

.db_tools: &db_tools |
  apk add --no-cache --repository http://dl-cdn.alpinelinux.org/alpine/v3.8/main/ postgresql=10.12-r0

.db_setup: &db_setup |
  pg_isready -d postgres -h postgres -p 5432 -U runner
  ./_scripts/db/restore-database-gitlab-ci.sh --db=test --ci

.start_e2e_app: &start_e2e_app |
  cd ${CI_PROJECT_DIR}
  npx serve packages/frontend/dist/domifa -l 4200 > ${CI_PROJECT_DIR}/frontend.log 2>&1 &
  yarn workspace @domifa/backend start:tests-ci > ${CI_PROJECT_DIR}/backend.log 2>&1 &
  echo "Wait for backend to be healthy... (timeout:40s)"
  curl --fail --silent -o /dev/null http://localhost:3000/healthz || sleep 5
  curl --fail --silent -o /dev/null http://localhost:3000/healthz || sleep 5
  curl --fail --silent -o /dev/null http://localhost:3000/healthz || sleep 5
  curl --fail --silent -o /dev/null http://localhost:3000/healthz || sleep 5
  curl --fail --silent -o /dev/null http://localhost:3000/healthz || sleep 5
  curl --fail --silent -o /dev/null http://localhost:3000/healthz || sleep 5
  curl --fail --silent -o /dev/null http://localhost:3000/healthz || sleep 5
  curl --fail --silent -o /dev/null http://localhost:3000/healthz || sleep 5
  curl http://localhost:3000/healthz
  curl http://localhost:4200/connexion
  curl http://localhost:4200
  curl --fail http://localhost:3000/healthz
  tail -100 ${CI_PROJECT_DIR}/frontend.log
  tail -100 ${CI_PROJECT_DIR}/backend.log

.tests_setup:
  stage: Tests
  variables:
    POSTGRES_DB: nice_marmot
    POSTGRES_USER: runner
    POSTGRES_PASSWORD: abcd
    POSTGRES_HOST_AUTH_METHOD: trust
    DOMIFA_ENV_ID: test
    NODE_ENV: tests-travis
    SECRET: 9Ibl1P3XxNJOqaWTnvBpCVw8o1kFoSwiUwL8NETPfMMZY0f2BG0tgZNdTbYRwLfwRjfaqaHISvOqhQL7nGpmES73V0vgR3tUQeyvnI8gsKTFFJJPYqLIbBCLiXT8LKx5Q3tJirYI0zM4Joby2SkYv9QxqwaMKZGxYjJrU5WHTmUnk6c4GL6w1rk5sI
    DOMIFA_ENV_ID: test
    POSTGRES_HOST: postgres
    POSTGRES_USERNAME: runner
    POSTGRES_DATABASE: domifa_test
    PUPPETEER_CHROME_HEADLESS: "true"
    PUPPETEER_CHROME_PATH: /usr/bin/chromium-browser
    PUPPETEER_CHROME_ARGS: "--no-sandbox"
    CHROMIUM_PATH: /usr/bin/chromium-browser
    PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: "true"
    DOMIFA_FRONTEND_URL: http://localhost:4200/
    DOMIFA_BACKEND_URL: http://localhost:3000/
    POSTGRES_DUMP_PATH: /builds/SocialGouv/domifa/_scripts/db/dumps/domifa_test.postgres.custom.gz
    SENTRY_DSN: https://5dab749719e9488798341efad0947291@sentry.fabrique.social.gouv.fr/31
    DOMIFA_2E2_RESTORE_DATABASES_SCRIPT: _scripts/db/restore-database-gitlab-ci.sh
  before_script:
    - *print_env

.install:node_modules: # from https://github.com/SocialGouv/gitlab-ci-yml/blob/v20.2.0/base_yarn_stage.yml
  image: node:14.15.5-alpine3.12
  stage: Install
  interruptible: true
  rules:
    - if: "$PRODUCTION || $TRIGGER"
      when: never
    - when: always
  cache: # https://docs.gitlab.com/ce/ci/caching/
    key:
      files:
        - yarn.lock
      prefix: ${CI_JOB_NAME}
    paths:
      - .cache
  before_script:
    - yarn config set cache-folder $CI_PROJECT_DIR/.cache/yarn # cache yarn dependencies into gitlab-ci runner cache: https://classic.yarnpkg.com/en/docs/cli/cache/
  script:
    - yarn install --frozen-lockfile --prefer-offline
  artifacts:
    expire_in: 1 day
    paths:
      - node_modules
      - packages/backend/node_modules
      - packages/frontend/node_modules
  retry:
    max: 1

Install:node_modules:
  extends:
    - .install:node_modules

# Install:e2e:node_modules:
#   image: node:14.15.5-alpine3.12
#   stage: Install
#   interruptible: true
#   cache: # https://docs.gitlab.com/ce/ci/caching/
#     key:
#       files:
#         - optional/e2e/runners/puppeteer/yarn.lock
#       prefix: ${CI_JOB_NAME}
#     paths:
#       - .cache
#   before_script:
#     - yarn config set cache-folder $CI_PROJECT_DIR/.cache/yarn # cache yarn dependencies into gitlab-ci runner cache: https://classic.yarnpkg.com/en/docs/cli/cache/
#   script:
#     - cd optional/e2e/runners/puppeteer
#     - yarn install --prefer-offline
#   artifacts:
#     expire_in: 1 day
#     paths:
#       - optional/e2e/runners/puppeteer/node_modules
#   only: # disable job on branchs as it is too slow for now
#     - master
#     - tags
#   retry:
#     max: 1

# Build:frontend:gitlab-ci: # "gitlab-ci" environment build
#   image: node:14.15.5-alpine3.12
#   stage: Build
#   interruptible: true
#   script:
#     - yarn --cwd packages/frontend build:gitlab-ci
#   artifacts:
#     expire_in: 1 day
#     paths:
#       - packages/frontend/dist
#   needs:
#     - Install:node_modules
#   dependencies:
#     - Install:node_modules
#   only: # disable job on branchs as it is too slow for now
#     - master
#     - tags
#   retry:
#     max: 1

.build:frontend:dist: # "dist" environment build
  image: node:14.15.5-alpine3.12
  stage: Build
  interruptible: true
  rules:
    - if: "$PRODUCTION || $TRIGGER"
      when: never
    - when: always
  script:
    - yarn --cwd packages/frontend build
  artifacts:
    expire_in: 1 day
    paths:
      - packages/frontend/dist
  needs:
    - Install:node_modules
  dependencies:
    - Install:node_modules
  retry:
    max: 1

Build:frontend:dist:
  extends:
    - .build:frontend:dist

.build:backend:dist: # "dist" environment build
  image: node:14.15.5-alpine3.12
  stage: Build
  interruptible: true
  rules:
    - if: "$PRODUCTION || $TRIGGER"
      when: never
    - when: always
  script:
    - yarn --cwd packages/backend build
  artifacts:
    expire_in: 1 day
    paths:
      - packages/backend/dist
  needs:
    - Install:node_modules
  dependencies:
    - Install:node_modules
  retry:
    max: 1

Build:backend:dist:
  extends:
    - .build:backend:dist

.test:backend:integration:
  extends: .tests_setup
  image: node:14.15.5-alpine3.12
  services:
    - name: postgres:10.14
  rules:
    - if: "$PRODUCTION || $TRIGGER"
      when: never
    - when: always
  script:
    - *db_tools
    - *db_setup
    - yarn workspace @domifa/backend test:ci --coverage --detectOpenHandles --forceExit
  needs:
    - Install:node_modules
  dependencies:
    - Install:node_modules
  retry:
    max: 1

Test:backend:integration:
  extends:
    - .test:backend:integration

.test:frontend:unit:
  extends: .tests_setup
  image: node:14.15.5-alpine3.12
  rules:
    - if: "$PRODUCTION || $TRIGGER"
      when: never
    - when: always
  script:
    - yarn workspace @domifa/frontend test --coverage --detectOpenHandles --forceExit
  needs:
    - Install:node_modules
  dependencies:
    - Install:node_modules
  retry:
    max: 1

Test:frontend:unit:
  extends:
    - .test:frontend:unit

# Test:e2e:dist:
#   extends: .tests_setup
#   image: registry.gitlab.factory.social.gouv.fr/socialgouv/docker/puppeteer-mongo-pg:4.2.0 # https://github.com/SocialGouv/docker/blob/master/puppeteer-mongo-pg/Dockerfile
#   # image: ghcr.io/socialgouv/docker/puppeteer:6.0.1
#   services:
#     - name: postgres:10.14
#   before_script:
#     - *db_setup
#     - *start_e2e_app
#   script:
#     - cd optional/e2e/runners/puppeteer/
#     - yarn test --debug
#   needs:
#     - Install:node_modules
#     - Install:e2e:node_modules
#     - Build:frontend:gitlab-ci
#   dependencies:
#     - Install:node_modules
#     - Install:e2e:node_modules
#     - Build:frontend:gitlab-ci
#   artifacts:
#     when: on_failure
#     expire_in: 1 week
#     paths:
#       - ${CI_PROJECT_DIR}/optional/e2e/runners/puppeteer/output
#       - ${CI_PROJECT_DIR}/backend.log
#       - ${CI_PROJECT_DIR}/frontend.log
#   only: # disable job on branches as it is too slow for now
#     - master
#     - tags
#   retry:
#     max: 1

# Release:
#   rules:
#     - when: never

Register:frontend:
  extends:
    - .base_register_kaniko_stage
  stage: Registration
  needs:
    - job: Install:node_modules
      artifacts: true
    - job: Build:frontend:dist
      artifacts: true
    - job: Test:frontend:unit
  variables:
    CONTEXT: .
    IMAGE_NAME: frontend
    DOCKER_BUILD_ARGS: >-
      -f packages/frontend/Dockerfile
  rules:
    - if: "$PRODUCTION || $TRIGGER"
      when: never
    - when: on_success

.register:backend:
  extends:
    - .base_register_kaniko_stage
  stage: Registration
  needs:
    - job: Install:node_modules
      artifacts: true
    - job: Build:backend:dist
      artifacts: true
    - job: Test:backend:integration
  variables:
    CONTEXT: .
    IMAGE_NAME: backend
    DOCKER_BUILD_ARGS: >-
      -f packages/backend/Dockerfile
  rules:
    - if: "$PRODUCTION || $TRIGGER"
      when: never
    - when: on_success

Register:backend:
  extends:
    - .register:backend

Seed:
  stage: Seed
  allow_failure: true
  image:
    name: postgres:11
    entrypoint: [""]
  environment:
    name: ${CI_COMMIT_REF_NAME}-dev2
    url: https://${CI_ENVIRONMENT_SLUG}-${CI_PROJECT_NAME}.${KUBE_INGRESS_BASE_DOMAIN}
  only:
    refs:
      - branches
  except:
    refs:
      - master
      - alpha
    variables:
      # Don't run when deploying in production or releasing
      - $PRODUCTION
      - $RELEASE
  variables:
    PGSSLMODE: require
    GIT_STRATEGY: clone
    PGPASSWORD: password_${CI_COMMIT_SHORT_SHA}
    PGDATABASE: autodevops_${CI_COMMIT_SHORT_SHA}
    PGUSER: user_${CI_COMMIT_SHORT_SHA}@${PGHOST}
    PGHOST: domifadevserver.postgres.database.azure.com
  script:
    - psql < ./_scripts/db/dumps/domifa_test.postgres.data-only.sql
