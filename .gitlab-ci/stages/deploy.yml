

.deploy_stage: &deploy_stage
  stage: "Deploy"
  dependencies: []
  services:
    - docker:$DOCKER_VERSION-dind
  variables: &deploy_stage_variables
    IMAGE_TAG: master
    REGISTRY: $CI_REGISTRY_IMAGE

.dev_stage: &dev_stage
  environment:
    name: fabrique-dev
  only:
    refs:
      - branches
      - tags
  except:
    variables:
      - $PRODUCTION


Create namespace:
  <<: *deploy_stage
  <<: *dev_stage
  extends: .base_docker_kube_image_stage
  stage: "Registration"
  script:
    # Skip the job if the namespace exists
    - "[[ $(kubectl get namespace ${K8S_NAMESPACE}) ]] && exit ${CI_JOB_SKIP_EXIT_CODE:-0}"
    # Or (re)create to ensure new quota are applied
    # - kubectl delete namespaces ${K8S_NAMESPACE} || true
    #
    - kubectl create namespace ${K8S_NAMESPACE}
    - kubectl annotate namespace ${K8S_NAMESPACE} field.cattle.io/projectId=${RANCHER_PROJECT_ID}
    #
    # Fake rancher namespace creation
    - kubectl annotate namespace ${K8S_NAMESPACE} field.cattle.io/containerDefaultResourceLimit='{}'
    - kubectl annotate namespace ${K8S_NAMESPACE} field.cattle.io/creatorId=gitlab
    - kubectl annotate namespace ${K8S_NAMESPACE} field.cattle.io/resourceQuota='{"limit":{"limitsCpu":"1500m","limitsMemory":"2Gi","requestsCpu":"100m","requestsMemory":"1Gi"}}'
    # Link the namespace to a git branch
    - kubectl annotate namespace ${K8S_NAMESPACE} git/branch=${CI_COMMIT_REF_NAME}
    #
    # Create secrets
    - export FRONT_URL=$(echo $FRONTEND_URL | base64)
    - export MJ_APIKEY_PRIVATE=$(echo "MJ_APIKEY_PRIVATE" | base64)
    - export MJ_APIKEY_PUBLIC=$(echo "MJ_APIKEY_PUBLIC" | base64)
    - export SECRET=$(echo "SECRET" | base64)
    - envsubst < ./.k8s/secret.yml > ./secret.yml
    #
    - kubectl apply -f ./secret.yml -n ${K8S_NAMESPACE}


Deploy backend:
  <<: *deploy_stage
  <<: *dev_stage
  extends: .base_docker_helm_image_stage
  variables:
    <<: *deploy_stage_variables
    CONTEXT: backend
    LETSENCRYPT_ISSUER: letsencrypt-staging
    IMAGE_NAME: $CI_REGISTRY_IMAGE/backend
    PORT: 3000
  script:
    #
    - curl -L https://github.com/SocialGouv/helm-charts/releases/download/v2.6.0/helm-just-linux-2.6.0.tgz | tar -C $(helm home) -xzv
    - helm repo add socialgouv https://github.com/SocialGouv/helm-charts/releases/download/v2.6.0
    - helm just fetch "socialgouv/nodejs#2.6.0"
    - envsubst < ./.k8s/backend/values.yaml > ./values.yaml
    - helm just render domifa-backend-${BRANCH_HASH} nodejs
        --set image.tag=${IMAGE_TAG}
        --set ingress.annotations."certmanager\.k8s\.io/cluster-issuer"=${LETSENCRYPT_ISSUER}
        --set ingress.hosts[0].host=${FRONTEND_HOST}
        --set ingress.tls[0].hosts[0]=${FRONTEND_HOST}
        --values ./values.yaml
    - helm just apply domifa-backend-${BRANCH_HASH}


Deploy MongoDB:
  <<: *deploy_stage
  <<: *dev_stage
  extends: .base_docker_helm_image_stage
  script:
    - export MONGODB_ROOT_PASSWORD=$(kubectl get secret domifa-secret -o jsonpath='{.data.MONGODB_ROOT_PASSWORD}' | base64 --decode)
    - export MONGODB_PASSWORD=$(kubectl get secret domifa-secret -o jsonpath='{.data.MONGODB_PASSWORD}' | base64 --decode)
    #
    - envsubst < ./.k8s/mongodb/values.yaml > ./values.yaml
    - cat ./values.yaml
    #
    - helm init --client-only
    - helm upgrade
        ${MONGODB_HOST}
        stable/mongodb
        --install
        --namespace ${K8S_NAMESPACE}
        --values ./values.yaml
        --wait || helm delete --purge ${MONGODB_HOST}

