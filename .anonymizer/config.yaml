log:
  level: debug
  format: text

storage:
  type: "{{type}}"
  directory:
    path: "{{tmp}}"
  s3:
    endpoint: "{{bucket_endpoint}}"
    bucket: "{{bucket_name}}"
    region: "{{bucket_region}}"
    access_key_id: "{{bucket_access_key}}"
    secret_access_key: "{{bucket_secret_key}}"
    prefix: "/anonymizer/pg_dumps"
    # force_path_style: true

dump:

  transformation:
    - schema: public
      name: usager
      transformers:
        - name: SetNull
          params:
            column: email
        - name: RandomFirstName
          params:
            column: prenom
        - name: Json
          params:
            column: telephone
            operations:
              - operation: set
                path: countryCode
                value: fr
              - operation: set
                path: numero
                value: ""
        - name: SetNull
          params:
            column: pinnedNote
        - name: RandomLastName
          params:
            column: nom
        - name: RandomLastName
          params:
            column: surnom
            keep_null: true
        - name: RealAddress
          params:
            columns:
              - name: villeNaissance
                template: "{{.City}}"
        - name: Json
          params:
            column: decision
            operations: 
              - operation: set
                path: motifDetails
                value: null
              - operation: set
                path: orientationDetails
                value: null
              - operation: set
                path: userName
                value_template: "{{ quote fakerName }}"
              - operation: set
                path: userId
                value_template: "{{ randomInt 0 1000000000}}"
              - operation: set
                path: uuid
                value_template: "{{ quote fakerUUID }}"
        - name: TemplateRecord
          params:
            # historique
            template: >
              {{ $val := .GetColumnValue "historique" }}
              {{ $new := list }}
              {{ if isNotNull $val }}
                {{ range $val }}
                  {{ $modified := mergeOverwrite . (dict "motifDetails" nil "orientationDetails" nil "userName" fakerName "userId" (randomInt 0 1000000000) "uuid" fakerUUID) }}
                  {{ $new = append $new $modified }}
                {{ end }}
                {{ .SetColumnValue "historique" (toJson $new) }}
              {{ end }}
        - name: TemplateRecord
          params:
            # ayantsDroits 
            template: >
              {{ $val := .GetColumnValue "ayantsDroits" }}
              {{ $new := list }}
              {{ if isNotNull $val }}
                {{ range $val }}
                  {{ $modified := dict "lien" .lien "prenom" fakerFirstName "nom" fakerFirstLastName "dateNaissance" (truncateDate "month" (mustToDate "2006-01-02" (split "T" .dateNaissance)._0)) }} 
                  {{ $new = append $new $modified }}
                {{ end }}
                {{ .SetColumnValue "ayantsDroits" (toJson $new) }}
              {{ end }}
        - name: Json
          params:
            column: import
            keep_null: true
            operations: 
              - operation: set
                path: date
                value_template: >
                  {{ quote (truncateDate "month" (mustToDate "2006-01-02" (split "T" (.GetColumnValue "import").date)._0)) }}
              - operation: set
                path: userId
                value_template: "{{ randomInt 0 1000000000 }}"
              - operation: set
                path: userName
                value_template: "{{ quote fakerName }}"
        - name: Json
          params:
            column: rdv
            keep_null: true
            operations: 
              - operation: set
                path: dateRdv
                value_template: >
                  {{ quote (truncateDate "month" (mustToDate "2006-01-02" (split "T" (.GetColumnValue "rdv").dateRdv)._0)) }}
              - operation: set
                path: userId
                value_template: "{{ randomInt 0 1000000000 }}"
              - operation: set
                path: userName
                value_template: "{{ quote fakerName }}"
        - name: Replace
          params:
            column: migrated
            value: true
            keep_null: false