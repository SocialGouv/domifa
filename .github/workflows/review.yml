name: Review

on:
  push:
    branches:
      - "**"
    tags-ignore:
      - v*

concurrency:
  cancel-in-progress: true
  group: ${{ github.ref }}

jobs:
  ##############################################################################
  ## BUILD BACKEND PACKAGE
  ##############################################################################
  build-backend:
    name: Build backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Node setup
        uses: actions/setup-node@v2
        with:
          node-version: "14"

      - name: Yarn cache setup
        uses: c-hive/gha-yarn-cache@v2

      - name: Install backend dependencies
        run: yarn workspace @domifa/backend install --frozen-lockfile --prefer-offline

      - name: Build backend
        run: yarn workspace @domifa/backend build

      - name: Archive backend build
        uses: actions/upload-artifact@v2
        with:
          name: backend-dist
          path: packages/backend/dist

  ##############################################################################
  ## BUILD FRONTEND PACKAGE
  ##############################################################################
  build-frontend:
    name: Build front-end
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Node setup
        uses: actions/setup-node@v2
        with:
          node-version: "14"

      - name: Yarn cache setup
        uses: c-hive/gha-yarn-cache@v2

      - name: Install front-end dependencies
        run: yarn --cwd packages/frontend install --frozen-lockfile --prefer-offline

      - name: Build front-end
        run: yarn --cwd packages/frontend build

      - name: Archive front-end build
        uses: actions/upload-artifact@v2
        with:
          name: frontend-dist
          path: packages/frontend/dist

  ##############################################################################
  ## BUILD AND REGISTER BACKEND IMAGE
  ##############################################################################
  register-backend:
    name: Register backend
    runs-on: ubuntu-latest
    needs: build-backend
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Get project name
        run: |
          echo "project=${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV

      - name: Download backend build
        uses: actions/download-artifact@v2
        with:
          name: backend-dist
          path: packages/backend/dist

      - name: Create image labels and tags
        id: docker_meta
        uses: "crazy-max/ghaction-docker-meta@2e1a5c7fa42123697f82d479b551a1bbdb1bef88"
        with:
          images: ghcr.io/socialgouv/${{ env.project }}/backend
          labels: |
            org.opencontainers.image.title=backend
            org.opencontainers.image.documentation=https://github.com/SocialGouv/${{ env.project }}/tree/${{ github.sha }}
          tags: |
            type=sha
            type=ref,event=pr
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=raw,value=sha-${{ github.sha }}
            type=semver,pattern={{major}}.{{minor}}

      - name: Set up Buildx
        id: buildx
        uses: docker/setup-buildx-action@master
        with:
          install: true

      - name: Registry authentication
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ secrets.SOCIALGROOVYBOT_NAME }}
          password: ${{ secrets.SOCIALGROOVYBOT_GHCR_PAT }}

      - name: Set buildx cache up
        uses: "actions/cache@v2"
        with:
          key: "${{ runner.os }}-buildx-backend-${{ hashFiles('packages/backend/Dockerfile') }}"
          path: /tmp/.buildx-backend-cache
          restore-keys: |
            ${{ runner.os }}-buildx-backend

      - name: Image build and register
        uses: docker/build-push-action@v2
        with:
          context: .
          push: "true"
          file: packages/backend/Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          tags: "${{ steps.docker_meta.outputs.tags }}"
          labels: "${{ steps.docker_meta.outputs.labels }}"
          cache-to: "type=local,dest=/tmp/.buildx-backend-cache"
          cache-from: "type=local,src=/tmp/.buildx-backend-cache"

  ##############################################################################
  ## BUILD AND REGISTER FRONTEND IMAGE
  ##############################################################################
  register-frontend:
    name: Register front-end
    runs-on: ubuntu-latest
    needs: build-frontend
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Get project name
        run: |
          echo "project=${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV

      - name: Download front-end build
        uses: actions/download-artifact@v2
        with:
          name: frontend-dist
          path: packages/frontend/dist

      - name: Create image labels and tags
        id: docker_meta
        uses: "crazy-max/ghaction-docker-meta@2e1a5c7fa42123697f82d479b551a1bbdb1bef88"
        with:
          images: ghcr.io/socialgouv/${{ env.project }}/frontend
          labels: |
            org.opencontainers.image.title=frontend
            org.opencontainers.image.documentation=https://github.com/SocialGouv/${{ env.project }}/tree/${{ github.sha }}
          tags: |
            type=sha
            type=ref,event=pr
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=raw,value=sha-${{ github.sha }}
            type=semver,pattern={{major}}.{{minor}}

      - name: Set up Buildx
        id: buildx
        uses: docker/setup-buildx-action@master
        with:
          install: true

      - name: Registry authentication
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ secrets.SOCIALGROOVYBOT_NAME }}
          password: ${{ secrets.SOCIALGROOVYBOT_GHCR_PAT }}

      - name: Set buildx cache up
        uses: "actions/cache@v2"
        with:
          key: "${{ runner.os }}-buildx-frontend-${{ hashFiles('packages/frontend/Dockerfile') }}"
          path: /tmp/.buildx-frontend-cache
          restore-keys: |
            ${{ runner.os }}-buildx-frontend

      - name: Image build and register
        uses: docker/build-push-action@v2
        with:
          context: .
          push: "true"
          file: packages/frontend/Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          tags: "${{ steps.docker_meta.outputs.tags }}"
          labels: "${{ steps.docker_meta.outputs.labels }}"
          cache-to: "type=local,dest=/tmp/.buildx-frontend-cache"
          cache-from: "type=local,src=/tmp/.buildx-frontend-cache"

  ##############################################################################
  ## GENERATE KUBERNETES MANIFESTS
  ##############################################################################
  manifests:
    name: Generate k8s manifests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Load review environment variables
        run: |
          cat ".github/review.env" >> $GITHUB_ENV

      - name: Yarn cache setup
        uses: c-hive/gha-yarn-cache@v2

      - name: Install kosko-charts dependencies
        run: yarn --cwd .k8s install --frozen-lockfile --prefer-offline

      - name: Generate k8s manifests
        run: yarn --cwd .k8s --silent generate:dev > manifests.yml
        env:
          SOCIALGOUV_BASE_DOMAIN: ${{ env.SOCIALGOUV_BASE_DOMAIN }}

      - name: Generate k8s namespace
        run: yarn --cwd .k8s --silent generate:dev _namespace > namespace.yml
        env:
          SOCIALGOUV_BASE_DOMAIN: ${{ env.SOCIALGOUV_BASE_DOMAIN }}

      # - name: Generate create-db job manifest
      #   run: yarn --cwd .k8s --silent generate:dev jobs/pg > create-db.yml
      #   env:
      #     SOCIALGOUV_BASE_DOMAIN: ${{ env.SOCIALGOUV_BASE_DOMAIN }}

      - name: Archive k8s manifests
        uses: actions/upload-artifact@v2
        with:
          name: manifests.yml
          path: manifests.yml

      - name: Archive k8s namespace
        uses: actions/upload-artifact@v2
        with:
          name: namespace.yml
          path: namespace.yml

    # - name: Archive create-db job
    #   uses: actions/upload-artifact@v2
    #   with:
    #     name: create-db.yml
    #     path: create-db.yml

  ##############################################################################
  ## DEPLOY BACKEND & FRONT-END
  ##############################################################################
  deploy-backend:
    name: Deploy application
    runs-on: ubuntu-latest
    needs: [register-backend, register-frontend, manifests]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Download k8s manifests
        uses: actions/download-artifact@v2
        with:
          name: manifests.yml

      - name: Download k8s namespace
        uses: actions/download-artifact@v2
        with:
          name: namespace.yml

      - name: Get namespace name
        uses: mikefarah/yq@master
        id: namespace
        with:
          cmd: yq eval '.metadata.name' namespace.yml

      # - name: Download create-db job
      #   uses: actions/download-artifact@v2
      #   with:
      #     name: create-db.yml

      # - name: Download restore-db job
      #   uses: actions/download-artifact@v2
      #   with:
      #     name: restore-db.yml

      - name: Install Kapp
        uses: vmware-tanzu/carvel-setup-action@v1
        with:
          only: kapp
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get project and namespace names
        run: |
          cat ".github/review.env" >> $GITHUB_ENV
          echo "project=${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV
          # echo "namespace=${GITHUB_REPOSITORY#*/}-${GITHUB_REF##*/}" >> $GITHUB_ENV
          echo "namespace=${NAMESPACE}" >> $GITHUB_ENV
        env:
          NAMESPACE: ${{ steps.namespace.outputs.result }}

      - name: Notify deployment start
        uses: bobheadxi/deployments@v0.6.0
        id: deployment
        with:
          step: start
          env: ${{ env.namespace }}
          token: ${{ secrets.GITHUB_TOKEN }}
          desc: "Deploying environment: ${{ env.namespace }}"

      - name: Create kubernetes config
        run: |
          mkdir ~/.kube
          touch ~/.kube/config
          echo ${{ secrets.SOCIALGOUV_KUBE_CONFIG_DEV2 }} | base64 -d > ~/.kube/config

      - name: Create k8s namespace and annotations
        run: kubectl create -f namespace.yml || true

      # - name: Create database
      #   run: kubectl apply -f create-db.yml

      - name: Deploy application
        run: kapp --dangerous-override-ownership-of-existing-resources -y deploy -a ${{ env.project }} --namespace ${{ env.namespace }} -f manifests.yml

      # - name: Seed database
      #   run: |
      #     kubectl delete -f restore-db.yml --namespace ${{ env.namespace }} || true
      #     kubectl apply -f restore-db.yml --namespace ${{ env.namespace }}

      - name: Notify deployment end
        uses: bobheadxi/deployments@v0.6.0
        if: always()
        with:
          step: finish
          status: ${{ job.status }}
          token: ${{ secrets.GITHUB_TOKEN }}
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
          env_url: https://${{ env.namespace }}.${{ env.SOCIALGOUV_BASE_DOMAIN }}
